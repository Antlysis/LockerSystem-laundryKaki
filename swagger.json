{
  "openapi": "3.0.0",
  "info": {
    "title": "Locker System",
    "description": "This API endpoint for LaundryKaki",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "hzchin@antlysis.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "host": "http://localhost:3000",
  "basePath": "/api/v1",
  "externalDocs": {
    "description": "Find out more about LaundryKaki",
    "url": "localhost:3000/api/v1/docs"
  },
  "servers": [
    {
      "url": "http://localhost:3000/api/v1"
    },
    {
    "url": "http://locker1.lct.thelaundro.com/api/v1"
    }
  ],
  "tags": [
    {
      "name": "Locker",
      "description": "Everything about your Locker",
      "externalDocs": {
        "description": "Find out more"
      }
    },
    {
      "name": "Scale",
      "description": "Access to Scale Output"
    },
    {
      "name": "Payment",
      "description": "Operations on payment",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "localhost:3000/api/v1/docs"
      }
    }
  ],
  "paths": {
    "/lockers/{action_code}": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Locker"
        ],
        "summary": "Obtain all locker status",
        "operationId": "getLockerStatus",
        "parameters": [
          {
            "name": "action_code",
            "in": "path",
            "description": "Action code for information",
            "required": "true",
            "schema": {
              "type": "string",
              "enum": ["GetAll"]
            },
            "example": "GetAll"            
          },
          {
            "name": "outlet_id",
            "in": "path",
            "description": "Outlet ID for information",
            "schema": {
              "type": "string"
            },
            "example": "TamanSungaiBesi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {                  
                  "$ref": "#/components/schemas/LockersResponse"                  
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockersResponse"                  
                }
              }
            }
          },
          "400": {
            "description": "**Invalid** status value"
          },
          "502": {
            "description": "Request *timeout*"
          }
        }
      },
      "post": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Locker"
        ],
        "summary": "Perform action to obtain information",
        "operationId": "getLockerStatus",
        "parameters": [
          {
            "name": "action_code",
            "in": "path",
            "description": "Action code for information",
            "required": "true",
            "schema": {
              "type": "string",
              "enum": ["Open","NewOutlet"]
            },
            "example": "Open"
          },
          {
            "name": "outlet_id",
            "in": "path",
            "description": "Outlet ID for information",
            "schema": {
              "type": "string"
            },
            "example": "TamanSungaiBesi"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/LockerBody",
          "example": {
            "$ref": "#/components/examples/LockerBody"
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        }
      }
    },
    "/scale/{action_code}":{
      "get":{
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Scale"
        ],
        "summary": "Get locker status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "getScaleStatus",
        "parameters": [
          {
            "name": "action_code",
            "in": "path",
            "description": "Action code for information",
            "required": "true",
            "schema": {
              "type": "string",
              "enum": ["GetAll"]
            },
            "example": "GetAll"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {                  
                  "$ref": "#/components/schemas/Scale"                  
                }
              },
              "application/json": {
                "schema": {                  
                  "$ref": "#/components/schemas/Scale"                  
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        }
      }
    },
    "/payment/{action_code}":{
      "get":{
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Payment"
        ],
        "summary": "Get payment action",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetPaymentAction",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "object",
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        }
      },
      "post": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          "Payment"
        ],
        "summary": "Perform action to obtain information",
        "operationId": "PostPaymentAction",
        "parameters": [
          {
            "name": "action_code",
            "in": "path",
            "description": "Action code for information",
            "required": "true",
            "schema": {
              "type": "string",
              "enum": ["PaymentRequest","PaymentStatus","VoidPayment"]
            },
            "example": "PaymentRequest"
          },
          {
            "name": "paymentType",
            "in": "query",
            "description": "Payment type",
            "required": "true",
            "schema": {
              "$ref": "#/components/schemas/PaymentType"         
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PaymentBody",
          "example": {
            "$ref": "#/components/examples/PaymentBody"
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"                  
                }
              },
              "application/json": {
                "schema": {                  
                  "$ref": "#/components/schemas/Payment"                  
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Scale": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "byte",
            "example": "U3dhZ2dlciByb2Nrcw=="
          },
          "name": {
            "type": "string",
            "example": "scale1"
          },
          "weight": {
            "type": "integer",
            "format": "double",
            "example": "0.01"
          },
          "statusReturn": {
            "type": "string",
            "description": "Scale Status",
            "enum": [
              "A",
              "B",
              "C",
              ""
            ],
            "example": "B"
          },
          "status": {
            "type": "object",
            "properties": {
              "zero": {
                "type": "boolean",
                "example": false
              },
              "stable": {
                "type": "boolean",
                "example": false
              },
              "weighting": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "xml": {
          "name": "Scale"
        }
      },
      "Payment": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "double",
            "example": "1.67"
          },
          "description": {
            "type": "string",
            "example": "remarks for action"
          },
          "paymentType": {
            "$ref": "#/components/schemas/PaymentType"
          },
          "productType": {
            "type": "string",
            "enum": [
              "Normal",
              "Promotion"
            ],
            "example": "Normal"
          },
          "outlet": {
            "$ref": "#/components/schemas/Outlet"
          },
          "create_date": {
            "type": "string",
            "format": "date-time",
            "example": "2019-12-18T13:58:21.328Z"
          }
        },
        "xml": {
          "name": "Payment"
        }
      },
      "Lockers": {
        "type": "object",
        "properties": {
          "locker1": {
            "type": "string",
            "example": "false"
          },
          "locker2": {
            "type": "string",
            "example": "true"
          },
          "locker3": {
            "type": "string",
            "example": "false"
          }
        },
        "xml": {
          "name": "Locker"
        }
      },
      "LockersResponse": {
        "type": "array",
        "items" : {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "locker1"
            },
            "bitmask": {
              "type": "number",
              "example": 256
            },
            "lock": {
              "type": "boolean",
              "example": false
            },
            "empty": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "xml": {
          "name": "LockersResponse"
        }
      },
      "Outlet": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "example": "Taman Sungai Besi"
          },
          "brand": {
            "type": "string",
            "example": "Wash Studio"
          }
        }
      },
      "PaymentType":{
        "type": "string",
        "enum": [
          "CreditCard",
          "DebitCard",
          "PromptPay",
          "Alipay",
          "Wechat Pay",
          "EMV QR",
          "Fasspay",
          "Boost",
          "Maybank QR",
          "UnionPay",
          "MCash",
          "GrabPay",
          "WechatPay CN",
          "VCash",
          "NETSPay"
        ],
        "example": "CreditCard",
        "description": "Payment type request"
      },
      "PaymentResponseCode":{
        "type": "string",
        "enum": [
          "Transaction cancelled",
          "Broken pipe",
          "Invalid format",
          "Invalid data length",
          "Transaction Success",
          "Transaction error code returned by Bank",
          "Processing",
          "Insert / Tap Card",
          "Enter PIN",
          "App Selection",
          "Authorising",
          "Draw Signature",
          "Enter phone number/email",
          "Processing error",
          "Host timeout",
          "Invalid Developer ID",
          "MPOS not activated",
          "Login required",
          "Action not permitted",
          "Service not available"
        ],
        "example": "Transaction Cancelled",
        "description": "Payment type request"
      },
      "PaymentSaleResponse":{
        "type": "object",
        "properties":{
          "ActionCode": {
            "type": "string"
          },
          "ResponseCode": {
            "$ref": "#/components/schemas/PaymentResponseCode"
          },
          "TransactionID": {
            "type": "string"
          },
          "ApprovalCode": {
            "type": "string"
          },
          "CardType": {
            "type": "string"
          },
          "ApplicationLabel": {
            "type": "string"
          },
          "CardNo": {
            "type": "string",
            "format": "password"
          },
          "CardHolderName": {
            "type": "string"
          },
          "TraceNo": {
            "type": "string"
          },
          "TC": {
            "type": "string"
          },
          "AID": {
            "type": "string"
          },
          "CVM_Type": {
            "type": "string",
            "enum": [
              "PIN",
              "NoCVM",
              "Signature"
            ],
            "example": "PIN",
            "description": "CVM Type request"
          }, 
          "TransactionDateTime": {
            "type": "string",
            "format": "date-time",
            "example": "2019-12-18T13:58:21.328Z"
          },
          "TID": {
            "type": "string"
          },
          "MID": {
            "type": "string"
          },
          "BatchNo": {
            "type": "string"
          },
          "InvoiceNo": {
            "type": "string"
          },
          "RREF_No": {
            "type": "number"
          },
          "TSI": {
            "type": "number"
          },
          "TVR": {
            "type": "string"
          },
          "EntType": {
            "type": "string"
          },
          "AmountAuthorised": {
            "type": "number",
            "format": "double"
          },
          "PrivateField": {
            "type": "string"
          },
          "EntryType": {
            "type": "string",
            "enum": [
              "Chip",
              "Contactless",
              "Magstripe",
              "ManualPAN_Entry"
            ],
            "example": "Contactless",
            "description": "Entry Type request"
          }
        }        
      }
    },
    "requestBodies": {
      "PaymentBody": {
        "description": "Find out more",
        "required": "true",
        "content":{
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Payment"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Payment"
            }
          }
        }
      },
      "LockerBody": {
        "description": "Find out more",
        "required": "true",
        "content":{
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Lockers"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Lockers"
            }
          }
        }
      }
    },
    "examples": {
      "PaymentBody": {
        "amount": 1.68,
        "description": "Extra Info",
        "paymentType": "CreditCard",
        "productType": {
          "$ref": "#/components/schemas/PaymentType"
        },
        "outlet": {
          "$ref": "#/components/schemas/Outlet"
        }
      },
      "PaymentSaleResponse": {
        "ActionCode": "PaymentRequest",
        "ResponseCode": {
          "$ref": "#/components/schemas/ResponseCode"
        },
        "TransactionID": "a12dECVdDeewas2173",
        "ApprovalCode": "R07741",
        "CardType": "Visa",
        "ApplicationLabel": "HLB Visa Credit",
        "CardNo": "492159******6014",
        "CardHolderName": "John Doe",
        "TraceNo": "156865",
        "TC": "0E872E0A62C5F83F",
        "AID": "A0000000031010",
        "CVM_Type": {
          "PIN": "00", 
          "NoCVM": "01", 
          "Signature": "02"
        }, 
        "TransactionDateTime": "2019-12-18T13:58:21.328Z",
        "TID": "89898903",
        "MID": "123451234512345",
        "BatchNo": "35",
        "InvoiceNo": "000325",
        "RREF_No": 733319393057,
        "TSI": 6800,
        "TVR": "Chip Online Pin",
        "EntType": "Chip Online Pin",
        "AmountAuthorised": 100.50,
        "PrivateField": {},
        "EntryType": {
          "Chip": "00",
          "Contactless": "01",
          "MagStripe": "02",
          "ManualPanEntery": "03"
        }
      },
      "LockerBody": {
        "outlet": "outlet1",
        "location": "Taman Sungai Besi",
        "brand": "Wash Studio",  
        "create_date": "2019-12-18T13:58:21.328Z"
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "security": [
      {
        "basicAuth": []
      }
    ]
  }
}